/**
 implementation 1: (object-oriented)
node class
   field: set of all nodes you're connected to
graph class
    field: set of nodes

 implementation 2: (adjacency list)

 graph class
    field: set of edges
    field: set of nodes

 edge class
     field: start and end



 implementation 3: (adjacency matrix)
 matrix with boolean



 ________________________



 _______________________
 (we need a directed graph)


 (polymorphism)
 ("needs to be polymorphic on some operation")

 data:
    sentence: the dog jumps when the bell rings    (could be a list of words) (we keep track of words by their index)
    node: region (a selection of the sentence)
    region: set of indices (number above every word)       (can be discontinuous)
    identifier: pair of tag & region              (e.g. tag = subject)
    edge: pair of nodes, tag        (tag identifies the kind of relationship between the two nodes)



 graph class
    field: set of all regions
    field: set of all edges

 tag class
    field: tag, set of regions          (so we need labels, because an index wouldn't give us any way to keep track of it)  (e.g. tag = subordination, record = main: x, sub1: y, sub2: z)

 region class
    field: set of indices
    //field: set of tags


passage is composed of sentences




 the dog (who loves the mouse) is named rover

 region: the dog...is named rover   = main clause  12789

 example of an edge: (2, 12789, subject)

 **/




do punctuation in cloud9


LIST OF AGENDA
- show how firebase does persistence
- make a simple (dummy answer) test run of latin generation
- add a concept word_settings.case
- expand subject & object to noun + genitive
	- wolf of the god
	- god of the wolves
- sentence:  kckcckk  -> main c is c c iq rel

SORTED LIST OF AGENDA
- make a simple (dummy answer) test run of latin generation
	- returns a JSON format with
		- minimum: latin target & english answer  DONE!!!!
		- middle: english target & latin answer
		- maximum: creates latin target & cartesian product of english answer
- be able to create output of different case


NEXT TIME
- make word order a property of allowed



CARTESIAN PRODUCT

wrap in cartesian product:
	set_word_settings
	set_kernel_properties

setter(level, output_type)   //output_type = [random, cartesian]
	return [kernel]

clause_type must be before tense
voice must be before verb type
implicitness before person
person before number


Level 1:
- number of S & O
- tense
- S & O swap

Level 2:
- number of S & O
- tense
- S & O swap
- person

Level 3:
- all of the above +  (iq/is swaps)




CREATE INTERFACE FOR NEW OBJECT




IN GENERAL
MONDAY AFTERNOON


WEDNESDAY 7?




google question
n = number of nodes in a graph min 2 max 20
k = how many connections
question: given a number of n and another number k, how many ways can you choose k connections such that every single node is connected to everything else?



Destructuring assignment
-
- it knows you want to destructure the list into two elements


akiva's schedule

available sunday 11am-1pm
available GIO 1 or 2pm DAN 5pm pst 8pm est
available tuesdy anytime


things to review
- callback


BASIC OPERATIONS
turn a ____ into a string
word_selector.get_text([clause.verb])

QUESTIONS










CLOSURE
- in js "this" would refer to whatever we're in the scope of (in this case - it would refer to the anonuymous function in create closure). So we assign it to a dummy variable which points it e ventually to "this" in word_selector
	- two options for the value of i when the closure is called
		- value of i when the closure is called
			- i would end up being the last value (e.g. 3)
		- value of i when the closure is created
			-


in the following version, we are enclosing over an environment, namely the environment that contains x. x is in the scope of wherever it happens to be. THus, the following function is enclosing over x.

var x = zork;
var json = arr.map(function (obj) {
	return obj.serialize() + x;
	});


this version below is not enclosing over anything:

var json = arr.map(function (obj) {
	return obj.serialize();
	});


WORD SELECTOR
click_2 calls click_3
	- click_3 does the legwork of highlighting and adding to words_in_play
	- click_2 manages click_3 and deals with the shift event

- click_3
	- input:
		i.d.   (an integer - which is the index)
	- output:
		- alters the html
		- alters this.words_in_play
		- doesn't return anything
- click_2



- get_text
	- input: indices (integers)

- get_selected_indices
	- this is designed to turn highlighted indices into a sorted list
	- because it's communicating with firebase [????] it can't rely on synchronous, all at once operation
	- so we have to use callback
	- input: words_in_play (set of strings)
	- output: list of indices (integers)
	[[used in update_subregions]]



CURRENT PROBLEMS

- make autotagger case insensitive

- when you click on multiple correct answers, the answer is counted as wrong

- coordinate clauses are counted two separate clauses when they should be counted as one

- a coordinate clause that is subordinate  i.e. c in the sentence A ( B / C) is not classified as a subordinate clause

- make sure get_indices and the other change is consistent throughout

- clean up and refactor all dictionaries

- clean up all debugging


- punctuation
	- punctuation isn't processed at all so far
	- join can't simply be on a blank space


- hide metacharacters display function



- highlighting entire clauses isn't working as an answer

FEEDBACK

NEXT TIME


DISCUSS
- difference between ID and index

INFRASTRUCTURE
- punctuation
	- two parallel lists
		list 1 words
		list 2 non word characters that follow the word at that index

	The book says: "the cat, dog and mouse slept."
	list 1: The, book, says, the, cat, dog, and, mouse, slept,
	list 2: 0, 0, : ", 0, ,, 0, 0, 0, ."
	ist 2:  ,  , : ",  , ,,  ,  ,  , ."


TAGGING INTERFACE
- change tagging
- duplicate tagging shouldn't be allowed (e.g. noun, noun)


USER INTERFACE
- if you click on multiple correct answers, it's counted as wrong
	- e.g. if you're asked "where's a noun?" and you click on cat & dog - it's counted wrong
	- 3 options for questions
		- a noun
		- all nouns
		- as many as you can find
		- at least x nouns
- for single word answers, a click is probably better than a submit button
- if you click on two adjacent separate answers, it will be read as a range



SETTING QUESTIONS
- difficulty level
- what questions to ask

RELATIVELY LITTLE THINGS
subjects and objects should be classed as verbs
add main verb and subordinate verb


FLOW OF GAME
- wrong answer
	- try again (give em a few trys)
- too many wrong answers
	- incorrect - "the correct answer is: "
	- next question button
- correct answer (mere click on the word, no need to submit)

- next question button is hit



CREATE UTILS FUNCTIONS


SEQUENCE OF QUESTIONS
- when a sentence is exhausted it should be removed from contention


CHORES
- enter more sentences
	- sonnets and twine quotes
- set up pre-bracketed sentences


COSMETIC
- center score
- indent question
- text to left
- tone down the red highlights
- put boxes around everything
- indent and separate the feeback box





From fairest creatures we desire increase, That thereby beauty's rose might never die, But as the riper should by time decease, His tender heir might bear his memory: But thou contracted to thine own bright eyes, Feed'st thy light's flame with self-substantial fuel, Making a famine where abundance lies, Thy self thy foe, to thy sweet self too cruel:Thou that art now the world's fresh ornament, And only herald to the gaudy spring, Within thine own bud buriest thy content, And tender churl mak'st waste in niggarding: Pity the world, or else this glutton be, To eat the world's due, by the grave and thee.





recommendation that methods shouldn't be a property of the object (class) but of the prototype
	- object should store the properties (output of the factory)    this.regions
	- class should store the methods (the factory itself)           this.get_tag_type

	- methods and functions differ as follows
		- in a method, an instance of the class is getting passed in implicitly as a first parameter
	- every object has a field which is a reference to its prototype


object vs class vs prototype
	- object is the particular instance of the class (there might be a dozen in one run of a program)
	- class is the specification (factory of objects)
	- environment within the class that stores information

the shift
	- don't have functions in objects
	- but rather in their underlying prototype



regions.map(function(r){return r.get_tag_types()});    = method (really properties on an object that are functions)

regions.map(function(r){return get_tag_types(r)});     = function

regions.map(get_tag_types);     = function

regions.map(Region.prototype.get_tag_types);     = function not a method that gets done once


but prototype functions don't work in javascript
	- every function in javascript is itself an object
	- regions.map(Region.prototype.get_tag_types);  doesn't work in javascript
	- Region.prototype.get_tag_types.call(r)   does work in javascript
	- regions.map(function(r){return Region.prototype.get_tag_types.call(r)});  works in js

	- regions.map(Function.call,Region.prototype.get_tag_types)


var r = ....
var display_tag = r.get_tag_type





LATIN GENERATOR

MAKING SENTENCES
we want modular functionality:
	- generate kcckckk
	- turn kccckckk into an internally consistent format  m int rel rel si cond iq
	- all this based on percentages of expansion for each clause type
	- maybe do it like this:
		- convert the k first:
			m c c rel c cond iq
		- use the k value to determine the c value:
			m int rel rel si cond iq
	- we need to check if the old build function can be recycled





CURRENT PROBLEMS IN LATIN
- i-stem
	-i-stem.allowed = bool
- need to add pronoun subject accusative
- main clause + subordinate clause
- need to add subordinating conjunction
- need to make adjectives
	- make kernel template
	- pick lexeme



CURRENT PROBLEMS IN ENGLISH
- need to add "a" vs. "an" distinction



NEW FUNCTIONALITY NEEDED
- cartesian product
- level to allowed needs to be systematically and easily accessible
1 : {
	declension : [2],
	conjugation : [1],
	number : [singular],
}
10 : {
	declension : [1, 2],
	conjugation : [1],
	number : [singular],
}

- needs a sentence composing function
- needs conditionals
	- need to be wary of distinguishing between apodoses and main clauses proper




DEBUGGING 9-7
TESTING END for loop make_form
word_setting_generator.js:50 DEBUG 9-5 word_settings_map.tense =  undefined
word_setting_generator.js:51 DEBUG 9-5 allowed.tense =  ["present", "imperfect", "future"]

SEQUENCE
word_setting_generator.js:54 DEBUG 9-5 kernel.sequence in set_word_setting =  undefined
sentence_tree_generator.js:169 DEBUG 9-6 kernel.gender =  n
sentence_tree_generator.js:187 Uncaught TypeError: Cannot read property 'word_id' of undefined(anonymous function) @ sentence_tree_generator.js:187pick_lexeme @ sentence_tree_generator.js:187make_form @ sentence_tree_generator.js:174make_kernel @ sentence_tree_generator.js:51start @ sentence_tree_generator.js:13window.onload @ index_latin.html:25









AUDIT-A SIT
he was heard


set not implemented in explorer and safari
so, question 1: is set doable at all?
question 2: why do a set in the first place if it has to be converted into a list?



TODO

make new clause objects when the button is clicked (main clause, subordinate clause, etc.)

coordination

keyboard tagging



TODO

make main clause processed by process bracketed text (currently it only creates subordinate clauses)




TODO

where did make clauses go - where should it go
















this.add_tag = function(tag) {
        if(tag.get_tag_type().indexOf("clause") !== -1) {
            region.make_clause(tag_type);
        }
    };




Dan's code
some returns true if some satisfy the condition









POSSIBLE IMPROVEMENTS
make words in play a parameter not a global variable



AGENDA FOR SUNDAY





- indices issue
- add open-bracket tagger
- run some twine grammar game questions as a test
- run some latin sentences

TODO NEXT
- clause.superordinate & clause.subordinate & clause.coordinate_left & clause.coordinate_right
- adding coordinating functions
- create an ability to highlight multiple words and then click button and that gives separate regions (subject, object, noun, verb, etc)
- auto-tagging
    - expand auto-tagging dictionary
        - add more pronouns, etc.
    - link auto-tagging dictionary to a web scraper (which would auto tag nouns, verb, adjs, advs, etc.)
    - display auto-tags and confirm/disconfirm


TODO IN LATIN GENERATOR

- make a map from level to allowed parameters (language dependent)
- create a mental verb module
- make a kernel/conjunction generator
- make agreement and the verb to be
- make_conjunction




TODO with Gio
make multiple highlights not all add as a single region (e.g. dog bell father should be three separate regions)
(maybe make a separate action for multiple buttons)



TODO cleanup
make a nicer clean output with regions and clause.subject


TODO bugs
- subordinate clause is getting entered twice
- in CLEAN OUTPUT we get undefined=which my father made ) rings



TODO bigger fixes
- make process_bracketed_text only display the brackets in the box, not actually add them as words



TODO questions
- how shouls quotes be tagged
    - author, work, integer
    - author + integer (with an option for anonymous, unknown, author?)
    - integer (sounds like a bad idea)


TODO add functionality
- create a dictionary of auto-tagged words (when, the, a, under)



TODO brute force tasks
- bracket some latin sentences for tagging
- bracket some sentences from the twine grammar game
- build up a dictionary of words that can automatically tag words: the, a, under, when, although, if


TODO
- add specific clause property to AS code
- review and add dan's bracket tagger
- merge indices
- run some tests (including latin sentences)



PRIORITIZE
1) - find and fix bug and as progressing pay attention to little differences
(debug.sat

2) get specific clause property into AS

3) get open bracket tagging

4) DS look at the tagged-boxes

TODO
bugs
- subordinate clause shows up twice



TODO MERGE CODE
DS FUNCTIONALITY
- add properties such as clause.subject to a clause
- open-bracket tagging (tag an open bracket and it tags the entire clause)

AS FUNCTIONALITY
- tagged-boxes
- firebase addition


MISMATCHES
- indexing starting at 1...


LITTLE THINGS IN AS CODE
- the bug
- when AS processes bracketed text, the main clause is not tagged and producexd











TODO DILEMMA
- on the one hand:
    - we want a region to be tagged with something like "main clause, subordinate clause, etc."
        (i.e. we want this to be parallel with the tagging of nouns and subjects)

- on the other hand:
    - we want an easy way to access the different clauses in a sentence
        e.g. we want to be able to ask easily clause.subject is what?


the fork in the road:
1) - make a Clause object which is the tag of a region'
    - it's accessed via region.tags[0] or some semi-clunky way (is there a better way to access it?)
2) make a property of each region which is region.clause
    - obviously this would be irrelevant for nouns and verbs etc.
    - but it would be easy to access



TODO write up interface for new text object (words & non-words)


