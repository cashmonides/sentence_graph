/**
 implementation 1: (object-oriented)
node class
   field: set of all nodes you're connected to
graph class
    field: set of nodes

 implementation 2: (adjacency list)

 graph class
    field: set of edges
    field: set of nodes

 edge class
     field: start and end



 implementation 3: (adjacency matrix)
 matrix with boolean



 ________________________



 _______________________
 (we need a directed graph)


 (polymorphism)
 ("needs to be polymorphic on some operation")

 data:
    sentence: the dog jumps when the bell rings    (could be a list of words) (we keep track of words by their index)
    node: region (a selection of the sentence)
    region: set of indices (number above every word)       (can be discontinuous)
    identifier: pair of tag & region              (e.g. tag = subject)
    edge: pair of nodes, tag        (tag identifies the kind of relationship between the two nodes)



 graph class
    field: set of all regions
    field: set of all edges

 tag class
    field: tag, set of regions          (so we need labels, because an index wouldn't give us any way to keep track of it)  (e.g. tag = subordination, record = main: x, sub1: y, sub2: z)

 region class
    field: set of indices
    //field: set of tags


passage is composed of sentences




 the dog (who loves the mouse) is named rover

 region: the dog...is named rover   = main clause  12789

 example of an edge: (2, 12789, subject)

 **/



