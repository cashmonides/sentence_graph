GIO
- alert error messages
    - variable error not appearing in either incorrrect password or user already exists
- persist error messages
- track stats
- exporting stats as excel manipulable things
- tutorial pages
- some work around for students without email address??
- overlapping tags in tagger
- targeted/customizable tags in tagger  
    - something like: delete all autotags, tag one thing, give it a property (custom tagged)
- enable "disk persistence"? (https://www.firebase.com/docs/ios/guide/offline-capabilities.html)
- improve login
    - alert user on all errors
    - check your email to confirm (to prevent maliciously creating many users)
- word selector such that it can support underneath translations
- non-clickable header in dropdown
- hiding admin from malicious children
- just hide spread operator


NEW FUNCTIONALITY
- text input mode
    - spell check
    - strip all punctuation

    
AGENDA
- get existing taxonomical data from dan
- research non-clickable header in dropdown

AKIVA
- remove all users except the good ones from firebase
- add dash and star parameters to modules
- add metacharacters to latin
- move latin to pre-footer
- rework the give away answer in latin mode
- remove dashes from the regex list of strip 
- add macrons to the word-selector 

DAN
- can we do our range sampling on true and false?

DAN
- refactor drop downs and sorted drop downs to allow for optgroup headings
    - e.g.  see {sees, see, saw, will see} fear {fears, fear, feared, will fear}
    
- refactor lexeme list so that it can create a vocabulary list 
    - using the value -   drop_down_settings: {noun: {lexicon_dummies: int} }
  
  
  
SUNDAY CRUCIAL
- strategize entry of new words and roots into etymology
- improve tagger
    - the dashes problem
    - the macron problem
- automatic entry of latin
- tagging a sentence as being in latin or english etc.
- overlapping tags in tagger
- implicational tags in tagger  
- get existing taxonomical data from dan
            
SUNDAY ALSO CRUCIAL
- fix the outside the box bug   
    - either move latin from pre-footer footer or just always have it above the submit button
- test etymology mode
- test optgroup
- test vocabulary cheat sheet
- finish dash and star removers
- clean up line breaks in admin page
- correct answer should overlap with the question: incorrect: LATIN and english togetherr





AKIVA
- map out what a taxonomy module would look like
- tweak levels and modules so there are a lot more
- put modules in units of 10
- add buttons to admin page
- comment tagger

DATA
- add sentences in english
- add words and roots

ADD FUNCTIONALITY
- change drop mode to quick mode
- experiment with converting latin to quick mode (a la duolingo)


DOWN THE ROAD FUNCTIONALITY
- taxonomical nested drop down for nouns (navigate taxonomy to animal)


SMALL THINGS
fix placeholders
fix “now click on the correct answer”
non-improving completed modules shouldn’t turn red when hovered


UNKNOWN BUGS
- wrong denominator
    when improving: CONGRATULATIONS test friday 3:30!
    YOUR PROGRESS IS: 2/12 (on a level that’s 1/6)
- eyes peeled for: no highlighted
- eyes peeled for: outside the box


















THE ANONYMOUS PROFILE DILEMMA
- how can you remain anonymous while preserving your identity
    - write a temporary anonymous user to firebase
        - gets deleted at end of session   
    - create an object that can be passed to profile???
    - cookies
         - 4kb limit
     - html5 local storage
        - 5mb limit
- is it worth it?
    - easy fix: no profile 
    


MONDAY
- cross-browser bugs  (safari handles arrays differently)
- persist errors to firebase?
    - call graph
        - statically a tree
        - but at runtime it's a graph
- anonymous mode
- look at metrics





EXIT STRATEGY
- make latin words more sophisticated objects, so they can be hoverable and clickable
- jquery
- webscraping
- customizable questions



TODO
- encapsualte user.get_profile()
    - i.e. everywhere it says user.data.profile


STEPS TO ETYMOLOGY
- translate to javascript
- add one fields to each word
    - minimum count before definition disappears
    - set our default at 5
- block out persist statements
- word history initialized as false when user get's created
- (also have to initialize a part of speech history when user get's created)


GAMEIFICATION
- how do they quit improving? do we want them to quit improving? will they get discouraged if they don't improve

LITTLE THINGS
- word selector should only have hovering behavior in quick mode

SUNDAY
- current module needs to be sensitiive to advancing or improving
- make onclick only activated for improving and advancing
- debug improve mode
- debug lightbox  3/8 when threshold is 5
- debug anonymous mode
    - add login button to header
    - create a property of quiz called anonymous.level or something & check for anonymous mode at the beginning of every quiz function
- debug icon name
- add etymology
- add etymology material to lightboxes
- add grammatical level to module and incorporate into quick mode and drop mode
- 

AGENDA
- run a full test
- lightbox bug is still there
- fix icon name bug
- anonymous message
- admin page
- make only improving and advancing hoverable
- add cheat sheet toggle
- turn off hoverable word selector
- add player level to profile page
- add aggregrate accuracy to profile page


- range-sampler
- test none display and potential no object drop

ADD FUNCTIONALITY
- profile page for anonymous user
- make past frontier items non-hoverable
- customize alert boxes
- accuracy is small but when you hover it gets bigger
- every end of module should bring you to the profile page


CROSS-BROWSER BUGS
---Safari
    - basically functional
    - if you click improve before starting, you get the error:
    TypeError: undefined is not an object (evaluating 'this.user.data.history[1].iteration') profile.js 26
    profile.js 26 reads: if (this.user.data.history[1].iteration == 0)
    
    - if you click cheat sheet button you get:
    [Error] TypeError: undefined is not an object (evaluating 'ALL_MODULES[mod_id].cheat_sheet')
	quiz.js 373 says: var cheat_sheet = ALL_MODULES[mod_id].cheat_sheet;
	
	- in grammar modes:
    TypeError: undefined is not a function (evaluating 'Array.from(set_of_indices)')

	
--FIREFOX   
    - same trivial bug as firefox (click on improve at very beginning)
    - if you click cheat sheet button you get:
    TypeError: ALL_MODULES[mod_id] is undefined
    quiz.js 373 says: var cheat_sheet = ALL_MODULES[mod_id].cheat_sheet;
    
BUGS
- latin appearing outside of box???
- toggle cheat sheet doesn't seem to work on a single click
- the ups hack is not working if you click on the level you are advancing on you still get mod parameters and that sets it as status= improving

- in profile, when you hit improve and you have no current improving, it shows Uncaught TypeError: Cannot read property 'iteration' of undefined
- lightbox message is wrong (3/8)
- at higher levels in mcmode english answer choices occur outside of desired box 
- no object in latin sentence -> no drop down in object (might be because of none mode)


SMALL FIXES
- remove - now click on the correct answer
- give away answer should include the latin phrase

EXIT STRATEGY
- latin strings clickable at every points
- GUI for customized questions

MORE AMBITIOUS
- clickable charts

DEEPER ISSUES
- macrons make a word separation, might not be an issue yet

BEFORE GIO
- make admin page more ambitious
- add logout button for profile page
- rework the improve/advance functionality
- add cheat sheet toggle

GIO
- creating a scope for the buttons and binding that scope to other scopes
- logging error messages
- make mediatemple account and start hosting
- going backwards brings a person to password and its visible and can be clicked forward


GIO ???
- for anonymous mode: is the general move to say if(!user.uid) {//some code} else {our current code}
    - 

BUGS
- advance -> improve -> profile
    Uncaught ReferenceError: get_percentage is not defined
- lightboxes aren't getting filled with text
- create some scope for the window page???
- anonymous mode in banner
    - anonymous warning in banner is displayed but id is undefined
        Uncaught TypeError: Cannot read property 'id' of null



TEST
- can we switch between advance and improve

NEW FUNCTIONALITY
- vocabulary cheat sheet button
    - 
- add something that randomly changes mode during a progress bar??
- support for range-sampling e.g. level: [1,5]
- improve button
    - improve -> module with iteration > 0 & in_progress = true
    - if no module description - alert: click on the module you want to improve
- add logout button for profile page
- macrons
- avoid identical question?


??? for GIO
- in the new mode (with url parameters) we still want no history to be created
- binding in window

TODO CLEANUP, ABSTRACTION AND MODULARITY
- abstract get accuracy and turn it into a util

TODO BUGS
- add line breaks to admin page
- english sentences in box are getting created multiple times


PROFILE PAGE FUNCTIONALITY
- all modules displayed with:
    - completed: accuracy  (hoverable only if no improving has been selected yet, black)
    - completed, improving: improving x/y old accuracy, new accuracy (hoverable, green)
    - in progress: x/y (e.g., 5/10), accuracy percentage (hoverable, red)
    - uncompleted: blank    (not hoverable, grey)



ADMIN FUNCTIONALITY
- number of iterations
- accuracy for each iteration
- aggregate accuracy
- nested explorer-type display




TODO DATA FUNCTIONALITY
- a function that returns eenglish sentences:
    Zeus loves Mars
    Zeus attacked Mars with a spear
    the Chimera lives under the stairs
    
    
TODO COSMETIC
- create optgroup for verbs


TODO BUGS
- 
- logout button & return to profile not working except as global functions - where should they be if not global?
- when a submodule is complete - lightbox says: "Your module score is: undefined"
- deep design issue: we need some layer of multiple tagging "we" is a personal pronoun and also a subject
- the give away function should be changed
    - give away with a lightbox and a next butto
- "that's a adverb"
 - "your module score is undefined"
- @ quiz.js 169 Uncaught TypeError: Cannot read property 'progress' of undefined
- when graduating a module 4/5 -> 5/5
- probably: logging out of a session resets progress bar but doesn't reset the metrics (i.e. question correct)


TODO ????
- aren't next_module and next_submodule redundant?
- //todo understand the following
    this.game.quiz = this;
- submodule_complete is done in both user.js and quiz.js 

TODO add functionality
- give away answer needs improving:
    - in question box: keep the question reformulated as: whoops, the _____ is highlighted
    - in word_selector: the answer gets highlighted
    - create an element next
- finishing the game should take us somewhere predictable
    - lightbox: congratulations you've beaten every level, now work on your accuracy
    - documet.location is set to profile

- avoid asking the identical question twice in a row
- want to avoid situation where accuracy is persisted so much that we lose granularity and its hackable
    - i.e. profile play profile play profile
- add anonymous alert to header

TODO make elegant
- put all html into the abstract make form

TODO
persist error messages to firebase
profile.js needs to send data to quiz.js as to what module to do    
    - perhaps via url parameters (e.g. ?mod=3)
- add the improve mode
    - add but freeze out everything for now
- finishing module should move the player to profile page
- test drop mode
- incorporate latin
- go through code and comment






TODO fields

(improvement can be inferred from in_progress = true & iterations > 0)
how do we determine what their progress is on improvement modu
the difference between improve and advance is whether iterations > 0


history / module_id : {
    iterations: 2        0-many
    in_progress: bool
    progress: 8/10
    metrics : {
        iteration : {
            wrong: {
                0:
                1:
                2:
                3:
            }
            }
    }
}

//total questions = wrong[0] / total_count





TODO
- speed of module <-> desire to improve a module
- low improvement rate -> frustration at improving
    - so if no exit from improving level, -> john doe will stop improving





TODO loose ends
- put a border around current module
- make modules clickable with lightbox/alert for "do you want to improve your accuracy"
- metadata for sentence (author, date, etc.)
- anonymous mode
- in non-anonymous mode - populate header with name and level
- mode change within submodule
    - 

- admin page
- drop mode
- lightbox
- set up on media temple
- obfuscation and general defensiveness
- tracking data
    - make sure the tracking of questions and such is robust enough to allow a full statistical analysis
    - total count of questions
    - count correct
        - specified for each sentence
        - specified for each mode
    - count incorrect
    - incorrect streak (pushed to list, maybe, and given an average??)
        - produces # of times max_incorrect_streak reached
    - goal:
        - see the stats for each module (for Akiva to tweak backstage)
        - see the stats for each kid (so kids and parents can see their progress)
        - see the stats for a grade level (so Akiva and parents can compare individual progress to collective progress)
    - where to store individual data
        - in history (module by module)
            - count correct
            - count incorrect
            - max streak reached
    - where to store metrics on sentences
            - in sentence object
            - fields
                -count correct
                - count incorrect
                - max streak reached
            - each field has to be initialized upon creation (because firebase doesn't create fields in they don't exist)
    - operations to aggregate data 
        - iterate over users to produce an aggregate module metrics
        
        
        
        - in each individual user
            - count correct
            - count incorrect
            - max streak reached
        - 
        - in a separate region
            - metrics
                - sentence_id
                    count correct
                    count incorrect
                    max streak reached
            - each field has to be initialized upon creation (because firebase doesn't create fields in they don't exist)
- incorporate latin





TODO questions
- there must be a better way of setting every default to 0, instead of my hacky for loop

TODO CHORES
- remove debugging and add LOG statements
- make a fuller list of tags for sentence
    -predicate
    -adjective
- send some sentences to firebase for testing
- make a module sequence
    - order of animals
    - images of animals in folder
    - set parameters for each module

TODO IN LATIN
- separate allowed lexemes from level, make allowed lexemes part of modules

TODO CLEVER
- come up with a function that takes a span [100, 300] and, as a module progress (1/10-10/10) samples from an appropriate part of that range

TODO REFACTORING
- make a control flow of user and persist
- eliminate all global functions
    - make modules a class
    - make persist a class
- get rid of state
    - make quiz an object
        - this.question_count

USER
- change_password (move from persist.js)
- login_user (move from persist.js)
- create user

PERSIST



QUIZ



TODO
- set_module score
- alert on close (you will lose all progress)
- module complete (10/10) should trigger a new lightbox and a new module
- generalize lightbox creation and new stage
- isolate all the parameters possible (e.g. reward, penalty
- mode should be anle to change within a single progress bar
- change data loaded to sentence data loaded & generalize load in persist to load_path
- make progress count
- get a browser name & set up mediatemple
- update user data with more recent categories (bar count, module, etc) - where it says set_user_data("score", state.score); in quiz
- check if we really need anything as complicated as: (state.bar_count * state.current_module_reward) / state.bar_threshold) / state.current_module_reward >= 1
    - can't we just say bar_count = bar_threshold??
- make a header with logout, see profile
- reporting all scores
- grey out submit button
    -
- other browsers:
    - firefox:
        - login & profile work
        - game: dropdown is huge for a second and then goes away / play is a little buggy with red highlighting but basically works
    - chrome:
        - login and profile work
        - [Error] TypeError: undefined is not a function (evaluating 'Array.from(set_of_indices)')
          	(anonymous function) (firebase.js, line 43)
- make an absolute reference to the logout button in header


SCORING ARCHITECTURE TODO
- change mode_streak to progress_count

SCORING ARCHITECTURE
- bar_count
- bar_threshold


hit progress threshold
    lightbox: congratulations
    on close: increment module_count
    if module_threshold has been reached
        lightbox: congratulations
        on close: next module
        reset progress bar
    else
        reset progress bar
    reset progress bar

- module_count
- module_threshold


- bar_score (variable - based on mode)
    - bar threshold
    - set by mode_streak
- module_score (e.g. 8/10) (denominator based on module)
    -
- module (i.e. what module you're in)
[question: should mode be able to change while still in a single progress bar??]




????
- should score and question count be used at all???
    - it might be good for backstage stats and analytics

MEDIATEMPLE
- maybe get a toplevel domain name
- the domain name points to the server (hosted by mediatemple)
- FTP connects me to server (uploads my js files to mediatemple)
    - can also connect to the command line at the server
- the server at mediatemple serves js files to kid's computers 



RESEARCH
- FTP (filezilla)
- SSH (putty for windows)
    - connecting to the command line
    - maybe do it straight from the mac command
- CRUD
    - data-binding


????
- path name not working
    // document.location = "../../profile/profile.html";
    //todo this is wrong here below - why doesn't above work?



    





TODO PRIORITY FOR WEEKEND
HIGH PRIORITY

- send Dan a link and have him do a login test
- research media temple


- quick test run of integrating latin

LOWER PRIORITY
- in Latin, convert debugging to logs
- give a functionality/bug report
- integrate Latin
- add categories to tagger
- try some implicational tagging
- clean up files / rename / archive all obsolete versions


TODO non-programming
- set up media temple (reorder credit card)
- research lightbox
- check performance on other browsers
- check performance on ipad & iphone & surface table


TODO GIO QUESTIONS
-$
    - $ is not defined
    - how is $ handled??? does it need to call an internet library or is it offline
- should score & question count etc. still be part of state or should it be metadata in user??

TODO LIGHTBOX RESEARCH
- event listener for closing lightbox
- random gallery test

TODO HTML CSS RESEARCH
- how to make radio button hoverable???
- widen input box for email and password
- make link hoverable at bottom???
- how do you set the default for links?
- randomly populate a div with images



TODO COSMETIC THINGS TO ADD
- randomly populate login page with background images (faded out sillhouettes)


TODO
- test reset password
- should score & question count etc. still be part of state or should it be metadata in user??
- start adding lightbox
- integrate latin
- punctuation runs over in test box
- create a generic drop down (JSON)
- persist skills and animals they have
- sidebar
    - grammar mode
    - latin mode
        - cheat sheets of varying quantity (e.g. at early levels they only have one cheat sheet but at higher levels they have more cheat sheets)


TODO LIGHTBOX APPROACH
- wrap or just include?
    - next_question() is what transitions from question to question
    - so do we wrap or just include or trigger next question on event:close lightbox?
        - wrap next_question()
            - if session_count <= lightbox_count:
                - call next question
            - if session_count = lightbox_count
                - call lightbox
                - ???but what goes under the lightbox? Do we call next question
        - just include featherlight inside of next_question()
            - if we call $.featherlight(e) will it still call the next function in n
        - event listener



TODO NEW FUNCTIONALITY
- automate the obfuscation???
- multiple tagging
    - we should be able to tag something as e.g. both subject and personal pronoun
- implicational tagging
    - subject | object -> noun
- some clever way of making variety in the question types
    - (randomization but also sensitive to proportion)
    - e.g.
    - latin sentences should be 80%
    - quick mode = 10%
    - drop mode = 10%




TODO ADD??
- confirm email in create account??





TODO cheat sheet
- different kinds of cheat sheet based on what mode of game they're in
    - grammar: links to txerminology
    - latin: charts

TODO COSMETIC IN QUIZ
- give more space to the cheat sheet
    - scorebox on the left
    - instructions on the right
    - anonymous alert small and beneath scorebox








TODO
- in quiz.js in generate_question_ui we have a new wordselector getting created and that clears the highlighting
- split up process incorrect answer into two parts
    - process incorrect answer
    - give feedback of the type: no that's a _____, try again

GAME OBJECT
we want a game object
    - properties
        - mode
    - methods
        - generate targets and dropoptions
            - should be level sensitive (i.e. only ask about things they've learned - nouns and verbs early etc.)
            - have to be careful to avoid deformed weightings
        - set the text of the questions and feedback
        - populate the html
            - wordselector object that needs to be either clickable or non-clickable
        - give away answer

DIFFERENCES BETWEEN MODES
- testbox
    - wordselector not clickable in drop mode
    - highlight can't be cleared in drop mode
- feedback box
    - give away answer is different in drop mode (needs to either highlight the answer or display the answer as text)
- extras
    - submit button in drop mode but mot in quick mode


AGENDA
- create a quiz mode object that has functionality of

    - generate question
        - returns:
            - target_tag
            - target_region
            - available_tags

    - generate-question ui
            - populate the HTML
                - questionbox: question_text (e.g. click on the word that matches...)
                - testbox: a wordselector object (either clickable or not clickable)
            - mechanics of game
                - refresh_score
                - set_highlighting if necessary (e.g. in drop mode)
                - process answer
    - submit_answer
        - either quick_click or submit button
        - process correct answer or process incorrect answer
            - incorrect answer


    - process answer
        - when we're in quick mode we need to pass in the tag_names in order to give away answers


    -
    - give away answer



- persistence of score across sessions (search terms)
- how to change html formats (quick mode vs. drop-downs e.g. bestiary)


???s for GIO
- how does data_loaded get the argument "data"?
- what exactly does click_callback really do?
- how does click_callback get its argument "index"?


BUGS
- in drop mode the correct answer is always last in the drop downs
- quick mode doesn't seem to be working now that drop mode has been added
- make multiple highlights not all add as a single region (e.g. dog bell father should be three separate regions)
(maybe make a separate action for multiple buttons)
- make process_bracketed_text only display the brackets in the box, not actually add them as words


API FOR QUIZ OBJECT
- load
    - basically it's a wrapping of our overall control flow
    - needs to be a callback because we're communicating with firebase
- data_loaded
    -
- load sentence
    - needs to be deserialized
    -
    - load is a callback in persist.js
- generate question
-




CURRENT BUGS
- in quick mode, the brackets don't behave properly
    - they toggle without submitting answer
- safari doesn't work?

GAMEPLAY FIXES
- a correct answer sometimes makes it hard to register that there's a new question (especially when the question is identical)
- maybe something like "Correct, now click.."
- once a few questions are answered correctly it should graduate to a new sentence
- needs to only ask questions based on tags they know


COSMETIC BUGS
- feedback box being empty or full is pushing questionbox around
- this is happening: verb = sings
                     verb = jumps made rings is lifted


GIO QUESTIONS
- why can't I migrate test sentences to another file?


CHORES
- increase number of tag buttons (relative clause)
    -
- put sentences in a different file
- research unicode
- make an offline version of quiz that doesn't query firebase

COSMETIC
- why isn't sentence box centered the same way box is?
- center score, different font
- indent question and feedback section
- put a box around text
- picture box below with author


ADD FUNCTIONALITY
- coordinate clause should be read as main or subordinate based on their leftward sibling
- 2-step tag type (user tags: "relative pronoun" and wizard asks: "what's the antecedent?")
    - or what part of speech -> noun -> what is the syntax
    - or relative pronoun -> what is the antecedent
- unicode characters need to be added to word character regex match (text.js line 23)
- subject & object tag should imply noun
- input brackets with mouse
-
- the 1st & 3rd column doesn't seem to display all the tags (e.g. possessive adjective)
- return a measure of nestedness
	- max number of subordinate layers
	- total length
	- number of subordinate clauses
- parameterize score into a total (e.g. correct = +3, incorrect streak of 3 = -1, score = correct - incorrect)
- subject of which clause?
- coordinate clause read their subordination level during autotagging
- custom question input


LATIN MODE GAME
- make sentence data
    - word selector not clickable
    - submit button + drop down
    - target_sentence
    - answer_sentence
    - available_options


WEBSCRAPING
- find parts of speech
- deliver a score of vocabulary/reading level



DOMAIN SPECIFIC FUNCTIONALITY
- antecedents
- discontinuous clauses



DOWN THE ROAD STUFF
- "collect" authors








functionality to add - smaller
- delete a single tag (as opposed to delete all tags) (would be useful when correcting a mistake)
- quick mode
- feedback with 3 cells
    - whoops. that's a ____. try again. (Question stays up)
    - correct.   null.   null.               (next question.)
- anything that isn't autotagged could be a specific color
    - i.e. gives you a sense of what hasn't been done
    - i.e. you load a sentence, everything is grayed out that hasn't been autotagged
    - complication (could do it for only single-region tags)
- level
    - autolevel: 1-10
        - quantify complexity: degree of nesting
        - quantify vocabulary: "reading level"
        -
    - minimum age: x
    - progress level: 1-5                 (hit)

- custom question ("is the following highlighted word an adjective or an adverb")
- coordinate clause needs to be set at the same level as its "sibling"
    - i.e. if its sibling is main, then it's main and if its sibling is subordinate, it's also subordinate
    - i.e. if it's surrounded by () -> it's subordinate
- safari runs totally differently (firefox seems ok)


functionality to add - bigger
- improve the autotagging - possibly via webscraping?




recoding
- make all the clauses consistent




DOWN THE ROAD
- useful to have a button that sets the level of the sentence (i.e. if it's a hard sentence it gets a higher level)
- a box for custom questions - e.g. "Find at least 3 prepositions in the following sentence"










set not implemented in explorer and safari
so, question 1: is set doable at all?
question 2: why do a set in the first place if it has to be converted into a list?



TODO

make new clause objects when the button is clicked (main clause, subordinate clause, etc.)

coordination

keyboard tagging



TODO

make main clause processed by process bracketed text (currently it only creates subordinate clauses)




TODO

where did make clauses go - where should it go
















this.add_tag = function(tag) {
        if(tag.get_tag_type().indexOf("clause") !== -1) {
            region.make_clause(tag_type);
        }
    };




Dan's code
some returns true if some satisfy the condition









POSSIBLE IMPROVEMENTS
make words in play a parameter not a global variable



AGENDA FOR SUNDAY





- indices issue
- add open-bracket tagger
- run some twine grammar game questions as a test
- run some latin sentences

TODO NEXT
- clause.superordinate & clause.subordinate & clause.coordinate_left & clause.coordinate_right
- adding coordinating functions
- create an ability to highlight multiple words and then click button and that gives separate regions (subject, object, noun, verb, etc)
- auto-tagging
    - expand auto-tagging dictionary
        - add more pronouns, etc.
    - link auto-tagging dictionary to a web scraper (which would auto tag nouns, verb, adjs, advs, etc.)
    - display auto-tags and confirm/disconfirm


TODO IN LATIN GENERATOR

- make a map from level to allowed parameters (language dependent)
- create a mental verb module
- make a kernel/conjunction generator
- make agreement and the verb to be
- make_conjunction




TODO with Gio





TODO bugs
- subordinate clause is getting entered twice
- in CLEAN OUTPUT we get undefined=which my father made ) rings



TODO bigger fixes



TODO questions
- how should quotes be tagged
    - author, work, integer
    - author + integer (with an option for anonymous, unknown, author?)
    - integer (sounds like a bad idea)



TODO brute force tasks
- bracket some latin sentences for tagging
- bracket some sentences from the twine grammar game
- add to dictionary of words that can automatically tag words: the, a, under, when, although, if



TODO DILEMMA
- on the one hand:
    - we want a region to be tagged with something like "main clause, subordinate clause, etc."
        (i.e. we want this to be parallel with the tagging of nouns and subjects)

- on the other hand:
    - we want an easy way to access the different clauses in a sentence
        e.g. we want to be able to ask easily clause.subject is what?


the fork in the road:
1) - make a Clause object which is the tag of a region'
    - it's accessed via region.tags[0] or some semi-clunky way (is there a better way to access it?)
2) make a property of each region which is region.clause
    - obviously this would be irrelevant for nouns and verbs etc.
    - but it would be easy to access



EXAMPLE OF NEW MAKE FUNCTION

<tr id="row1" class="hoverable">
    <td>column 1</tr>
    Some Text
</tr>

var gui = {
    tag: "tr",                      //or div, a, img, button, etc.
    id: "row1",                     //
    children: [                     //children = whatever ends up inside the tag
        {tag: "td", text: "column 1", onclick = function(){ }   },   //can have a recursive tag and text inside of it
        "Some Text"                                         //textNode inside the tag
    ],
    text: "hello world"
    class: "hoverable"                  //gives a className to everything in the tag, in this case tr

};

make2(gui, container)


NB: you can't have both children and text. If you want text, just put it in children
i.e. text is just a shortcut for putting in a single children

{tag: "whatever". text: "hello"}

{tag: "whatever". children: ["hello"], text: "xxx"}








SOCIAL ENGINEERING:
competition:
    - we want to encourage students to compete with each other at two levels simultaneously:
    	- "advance" highest module
	    - "improve" repeat module (improve accuracy) 
focus:
    - we want students to be focussed, i.e. we don't want students to be able to jump from module to module. I.e. it would be too crazy to be playing too many modules at once





OPTION 1: locked in improvement
	if a student chooses to improve, they're locked in improvement until they finish 
		- pros: more focused
		- cons: trapped feeling
		
OPTION 2: parallel advance & improve
	- on any given session, a student can either improve or advance and they can switch back and forth between those two modes
		- but of course they can only be improving on on one level at a time
	- e.g. 
		- Vincent is on level Kraken 7/10
		- his buddy John is at the same level but his accuracy is higher at lower levels
		- so Vincent goes home, clicks "improve"
			- message: "you've chosen to improve your accuracy - pick the module you want to improve"
			- he picks kangaroo
				- his user profile changes and locks him in at kangaroo for improving
				- he starts improving at kangaroo
				- his profile now looks like this:
					- kraken has a box around it and is red
					- kangaroo has a light box around it saying "improving" or something like that
					- he has two buttons: "improve" and "advance" 
					- improve takes him to kangaroo
					- advance takes him to kraken
		- pros: encourages both modes
		- cons: harder to program








LEXEME LIST REFACTORING

We need a double-duumy lexeme list.
Question: Should we put all our lexeme lists in some master lexeme list?
master_lexeme_list is an object??? No.
Organization of master lexeme list:
lexemes property: all lexemes
Some lexeme_list_name: types_of_lexeme_used pairs.
get_lexemes: takes list name, returns lexeme dict.
var master_object = {
    lexemes:   {subject: dog, 
                verb: eat, 
                object: cuckoo,
                dummy_noun_0: dragon,
                dummy_noun_1: snake,
                    double_dummy_noun_0: fish,
                    double_dummy_noun_1: cat
    },
    all_lexemes: [subject, verb, object, dummy_noun_0, dummy_noun_1, double_dummy_noun_0, double_dummy_noun_1],
    dummy_lexemes: [subject, verb, object, dummy_noun_0, dummy_noun_1],
    lexemes_used: [subject, verb, object],
    get_lexemes: function() {/*
         examples:
         get_lexemes('all_lexemes') = [dog, eat, cuckoo, dragon, snake, fish, cat]   //used + dummy + double dummy
         get_lexemes('dummy_lexemes') = [dog, eat, cuckoo, dragon, snake]     //used + dummy
         get_lexemes('lexemes_used') = [dog, eat, cuckoo]
         should be able to use this to refer to master_object
    */}
}


Cartesian

1 : {
    
}