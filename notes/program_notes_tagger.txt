INTERFACE
- get_region(indices)
- region.get_tag_types -> strings of tags "noun" "verb" etc.



TODO
- in quiz.js in generate_question_ui we have a new wordselector getting created and that clears the highlighting
- split up process incorrect answer into two parts
    - process incorrect answer
    - give feedback of the type: no that's a _____, try again

GAME OBJECT
we want a game object
    - properties
        - mode
    - methods
        - generate targets and dropoptions
            - should be level sensitive (i.e. only ask about things they've learned - nouns and verbs early etc.)
            - have to be careful to avoid deformed weightings
        - set the text of the questions and feedback
        - populate the html
            - wordselector object that needs to be either clickable or non-clickable
        - give away answer

DIFFERENCES BETWEEN MODES
- testbox
    - wordselector not clickable in drop mode
    - highlight can't be cleared in drop mode
- feedback box
    - give away answer is different in drop mode (needs to either highlight the answer or display the answer as text)
- extras
    - submit button in drop mode but mot in quick mode


AGENDA
- create a quiz mode object that has functionality of

    - generate question
        - returns:
            - target_tag
            - target_region
            - available_tags

    - generate-question ui
            - populate the HTML
                - questionbox: question_text (e.g. click on the word that matches...)
                - testbox: a wordselector object (either clickable or not clickable)
            - mechanics of game
                - refresh_score
                - set_highlighting if necessary (e.g. in drop mode)
                - process answer
    - submit_answer
        - either quick_click or submit button
        - process correct answer or process incorrect answer
            - incorrect answer


    - process answer
        - when we're in quick mode we need to pass in the tag_names in order to give away answers


    -
    - give away answer



- persistence of score across sessions (search terms)
- how to change html formats (quick mode vs. drop-downs e.g. bestiary)


???s for GIO
- how does data_loaded get the argument "data"?
- what exactly does click_callback really do?
- how does click_callback get its argument "index"?


BUGS
- in drop mode the correct answer is always last in the drop downs
- quick mode doesn't seem to be working now that drop mode has been added

API FOR QUIZ OBJECT
- load
    - basically it's a wrapping of our overall control flow
    - needs to be a callback because we're communicating with firebase
- data_loaded
    -
- load sentence
    - needs to be deserialized
    -
    - load is a callback in persist.js
- generate question
-




CURRENT BUGS
- in quick mode, the brackets don't behave properly
    - they toggle without submitting answer
- safari doesn't work?

GAMEPLAY FIXES
- a correct answer sometimes makes it hard to register that there's a new question (especially when the question is identical)
- maybe something like "Correct, now click.."
- once a few questions are answered correctly it should graduate to a new sentence
- needs to only ask questions based on tags they know


COSMETIC BUGS
- feedback box being empty or full is pushing questionbox around
- this is happening: verb = sings
                     verb = jumps made rings is lifted


GIO QUESTIONS
- why can't I migrate test sentences to another file?


CHORES
- increase number of tag buttons (relative clause)
    -
- put sentences in a different file
- research unicode
- make an offline version of quiz that doesn't query firebase

COSMETIC
- why isn't sentence box centered the same way box is?
- center score, different font
- indent question and feedback section
- put a box around text
- picture box below with author


ADD FUNCTIONALITY
- new question type: what is the highlighted word? (with options in a drop-down)
- 2-step tag type (user tags: "relative pronoun" and wizard asks: "what's the antecedent?")
- unicode characters need to be added to word character regex match (text.js line 23)
- subject & object tag should imply noun
- the 1st & 3rd column doesn't seem to display all the tags (e.g. possessive adjective)
- return a measure of nestedness
	- max number of subordinate layers
	- total length
	- number of subordinate clauses
- parameterize score into a total (e.g. correct = +3, incorrect streak of 3 = -1, score = correct - incorrect)
- subject of which clause?
- coordinate clause read their subordination level during autotagging
- custom question input
- input brackets with mouse

WEBSCRAPING
- find parts of speech
- deliver a score of vocabulary/reading level



DOMAIN SPECIFIC FUNCTIONALITY
- antecedents
- discontinuous clauses



DOWN THE ROAD STUFF
- "collect" authors








functionality to add - smaller
- delete a single tag (as opposed to delete all tags) (would be useful when correcting a mistake)
- quick mode
- feedback with 3 cells
    - whoops. that's a ____. try again. (Question stays up)
    - correct.   null.   null.               (next question.)
- anything that isn't autotagged could be a specific color
    - i.e. gives you a sense of what hasn't been done
    - i.e. you load a sentence, everything is grayed out that hasn't been autotagged
    - complication (could do it for only single-region tags)
- level
    - autolevel: 1-10
        - quantify complexity: degree of nesting
        - quantify vocabulary: "reading level"
        -
    - minimum age: x
    - progress level: 1-5                 (hit)

- custom question ("is the following highlighted word an adjective or an adverb")
- coordinate clause needs to be set at the same level as its "sibling"
    - i.e. if its sibling is main, then it's main and if its sibling is subordinate, it's also subordinate
    - i.e. if it's surrounded by () -> it's subordinate
- safari runs totally differently (firefox seems ok)


functionality to add - bigger
- improve the autotagging - possibly via webscraping?




recoding
- make all the clauses consistent




DOWN THE ROAD
- useful to have a button that sets the level of the sentence (i.e. if it's a hard sentence it gets a higher level)
- a box for custom questions - e.g. "Find at least 3 prepositions in the following sentence"










set not implemented in explorer and safari
so, question 1: is set doable at all?
question 2: why do a set in the first place if it has to be converted into a list?



TODO

make new clause objects when the button is clicked (main clause, subordinate clause, etc.)

coordination

keyboard tagging



TODO

make main clause processed by process bracketed text (currently it only creates subordinate clauses)




TODO

where did make clauses go - where should it go
















this.add_tag = function(tag) {
        if(tag.get_tag_type().indexOf("clause") !== -1) {
            region.make_clause(tag_type);
        }
    };




Dan's code
some returns true if some satisfy the condition









POSSIBLE IMPROVEMENTS
make words in play a parameter not a global variable



AGENDA FOR SUNDAY





- indices issue
- add open-bracket tagger
- run some twine grammar game questions as a test
- run some latin sentences

TODO NEXT
- clause.superordinate & clause.subordinate & clause.coordinate_left & clause.coordinate_right
- adding coordinating functions
- create an ability to highlight multiple words and then click button and that gives separate regions (subject, object, noun, verb, etc)
- auto-tagging
    - expand auto-tagging dictionary
        - add more pronouns, etc.
    - link auto-tagging dictionary to a web scraper (which would auto tag nouns, verb, adjs, advs, etc.)
    - display auto-tags and confirm/disconfirm


TODO IN LATIN GENERATOR

- make a map from level to allowed parameters (language dependent)
- create a mental verb module
- make a kernel/conjunction generator
- make agreement and the verb to be
- make_conjunction




TODO with Gio
make multiple highlights not all add as a single region (e.g. dog bell father should be three separate regions)
(maybe make a separate action for multiple buttons)



TODO cleanup
make a nicer clean output with regions and clause.subject


TODO bugs
- subordinate clause is getting entered twice
- in CLEAN OUTPUT we get undefined=which my father made ) rings



TODO bigger fixes
- make process_bracketed_text only display the brackets in the box, not actually add them as words



TODO questions
- how shouls quotes be tagged
    - author, work, integer
    - author + integer (with an option for anonymous, unknown, author?)
    - integer (sounds like a bad idea)


TODO add functionality
- create a dictionary of auto-tagged words (when, the, a, under)



TODO brute force tasks
- bracket some latin sentences for tagging
- bracket some sentences from the twine grammar game
- build up a dictionary of words that can automatically tag words: the, a, under, when, although, if


TODO
- add specific clause property to AS code
- review and add dan's bracket tagger
- merge indices
- run some tests (including latin sentences)



PRIORITIZE
1) - find and fix bug and as progressing pay attention to little differences
(debug.sat

2) get specific clause property into AS

3) get open bracket tagging

4) DS look at the tagged-boxes

TODO
bugs
- subordinate clause shows up twice



TODO MERGE CODE
DS FUNCTIONALITY
- add properties such as clause.subject to a clause
- open-bracket tagging (tag an open bracket and it tags the entire clause)

AS FUNCTIONALITY
- tagged-boxes
- firebase addition


MISMATCHES
- indexing starting at 1...


LITTLE THINGS IN AS CODE
- the bug
- when AS processes bracketed text, the main clause is not tagged and producexd











TODO DILEMMA
- on the one hand:
    - we want a region to be tagged with something like "main clause, subordinate clause, etc."
        (i.e. we want this to be parallel with the tagging of nouns and subjects)

- on the other hand:
    - we want an easy way to access the different clauses in a sentence
        e.g. we want to be able to ask easily clause.subject is what?


the fork in the road:
1) - make a Clause object which is the tag of a region'
    - it's accessed via region.tags[0] or some semi-clunky way (is there a better way to access it?)
2) make a property of each region which is region.clause
    - obviously this would be irrelevant for nouns and verbs etc.
    - but it would be easy to access



