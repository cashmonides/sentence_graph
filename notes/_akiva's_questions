USEFUL HELP FROM DAN
- examples of what the utils do, especially dict_utils


SCHEDULE
need to do: inflect
review: drop down
that brings me up to kck > utils



REVIEW IN DEPTH: 
kernel.js
role.js

must review dict_utils.js (especially dict_navigate)


STUFF IN SENTENCE.JS THAT ARE UNCLEAR
get_conjunction_drop_and_non_drop
get_all_drops_and_non_drops


CHECK
are we doing c_null_main ever - add to module and see if it works


NAMING
- should we call all kck instances of sentence kcksentence?
    - to avoid overlap with other uses of sentence

IMPORTANT EXPLAIN
what does this.each_kernel do? For instance in determine_sequence
        e.g.
            // Otherwise choose a random sequence on both sides.
        this.each_kernel('adopt_random_sequence', sequences);


EXPLAIN
error catching mode
    what is LEXEME_ERROR_CATCHING_MODE? what effect do the different options have
    can we have a version that does this:
        development:
            shows backstage log and doesn't write to urgent error log
        release:
            hides backstage log and does write to urgent error log



CHORE-FRIENDLY BASICS
- the numerical parameter in JSON.stringify
    - kck > kernel_display.js reads as follows:
    - return JSON.stringify(json_options, null, 2);
    - what is the 2?
- track down all uses of the term 'regime' and strictly define

CHORE
- console.log all the steps in kernel_display.js
- console.log all the classifications

RELATIVELY SIMPLE QUESTIONS
- what is the deal witb "string with period"?
    - it looks like it deals with a data type property.value
    - but what's an example of this? how is it used?
    - would it be e.g. animate.false?
- walk me through a use of get_name for a lexeme
- when do we use find_conjunction_index? (doesn't seem to be used anywhere)
- is conjunction in kernel_utilities a string or an object?
- should we make a backstage log when we return new KCKSentence?
    - i.e. assign new KCKSentence to a variable
    - console log that variable
    - then return that variable?


GO  INTO IN DEPTH BECAUSE IMPORTANT
- all of component folder

HIGH PRIORITY QUESTIONS
- overall concept of kck > kernel_display.js    
    - what is a concrete example of a kernel passing through kernel_display.js?
    - i.e. K[...]  fill in the blank
- just a basic definition of "classifications" - synonyms, fuller explanation, etc.
- get_current_module(kck_level) seems fishy


MID PRIORITY QUESTIONS

- the missing citation_name issue   
    - in kck -> conjunction_object.js we have a method that uses citation name
    - but citation_name is not filled in for any conjunction in the conjunction_library
    - (though there is a commented out citation_name for the first conjunction)
    - is this just an oversight and every conjunction should have a citation_name?
    - or is the conjunction object and citation_name obsolete and need to be replaced?
    - has the Conjunction object been replaced with conjunction_type?
    









LOW PRIORITY QUESTIONS
- nonexistant key
- what is the point of this in kck > compare_path?
    - var same_last_answer = false;
    - is it just a not yet implemented functionality?
    - is it when they answer the same thing twice in a row
    
BLACK BOXES
drop_display_level_accessors
most of drop_down folder in kck needs deep review by Akiva

SLIGHT COMMENTING WOULD BE HELPFUL
drop_display_utils.js



CURRENT FILE UNDER REVIEW
- kck > kernel_display.js  (gonna be a long time to finish)

FILES TO REVIEW FURTHER HIGH PRIORITY
- kck > kernel.js

FILES TO REVIEW FURTHER MID PRIORITY
- kck > conjunction_object.js
- kck > sentence_display.js


FILES THAT DON'T MAKE ANY SENSE
kck > option_list_to_json.js

FILES REVIEWED AND MORE OR LESS UNDERSTOOD
kck > allowed (folder)
kck > ambiguity (folder)

kck > compare_path.js
kck > conjunction_library
kck > conjunction_type
kck > kernel_restrictions.js
kck > kernel_utilities.js
kck > language_library.js
kck > main.js
kck > nonexistant.js


THINGS THAT NEED TO BE CHANGED WHEN NOUNS ARE ADDED
get_all_drops_and_non_drops

SPECIFIC QUESTIONS
- relation of red_herring to bool_maybe_string?
- is the following something that's globally fixed when we want it to be a changeable parameter?
    var drop_down_language = 'latin'; 
    (in kck > allowed > json_option_data.js
- what are 'orders'?
- just a little more clarity on the function filter_allowed_with_constraints (just because it seems so important)

WTF
- kck > allowed > features_from_tf_code.js
- kck > allowed > language_sorts.js
- option_list_to_json.js (not sure where it is but it contains the var by_feature)
- kck > lexeme > converted_lexeme_list (what the hell is the syntax here?)
- the whole point of NonexistantKey
- why does this happen in rule.js?
        get_non_operators_test();

GLOBAL VARIABLES
red_herring
lexeme_constraints



FILES THAT ARE MOSTLY DATA (possibly move to a single data folder)
kck > allowed > json_option_data.js
kck > allowed > terminology_display.js (definitely belongs in data)
kck > ambiguity > ambiguous_tenses.js
kck > component > var role_to_part_of_speech_map

FILES THAT ARE PERHAPS BETTER AS UTILS (possibly integrate into utils folder)
var match_dicts (in kck > allowed > lexeme_constraints.js)
check_is_direction should be a util, while the rest of kernel_utilities should be a master function


FILES THAT MAYBE SHOULD BE CHANGED IN LOCATION
make_random_sentence right now lives in kernel_utils but it really is part of the master control flow
maybe there should be a master flow that contains all the big functions
    pick and make conjunction
    expand conjunction and create two kernels
var default_direction etc. maybe should be stored in a global variables file    



ARE THESE OBSOLETE?
- entire cosmetics folder



MAYBE MOVE TO GLOBALS
- some of kernel_utilities
- entire contents of language_library.js
- we should probably redesign the following so that it's a global or data-driven
        KCKSentence.prototype.has_same_sequence_on_both_sides = function () {
            // Currently, only subordinate clauses require this.
            return this.get_conjunction().get_type() === 'subordinating';
        }



A USEFUL KIND OF NOTE
- an example of the output in sentence_display.js


DESIGN ISSUES
- maybe better to quarantine all drop-down decisions from the actual kernel and sentence generation
