/////


Agenda for future (made in mid-september 2016)

current findings:

START OF MENTAL VERB DIGRESSION

mental verbs have weird rules
examples:
they spoke why he was killed
they were spoken why the mountain is pushed (would make sense as "told", though)
so we have to fix this

also only one answer choice is somewhat awkward

but the noun switch appears to work
its secret is that unless there are nouns, there's no subject and object (in the template)
this might also create issues with "why", since "why" introduces a clause
that acts as an object

since "why" is causing so many issues, one solution would be to just throw it out
but this is somehow unsatisfying


AKIVA'S RESPONSE:
Clearly mental verbs are special in that they can take clauses as subjects and objects.
There are other situations where clauses are subjects and objects (e.g. quod the fact that clause)
At some point in the future we should bring our system into alignment as much as possible with
current linguistic theory, if it's useful.

But for mental verbs we need a short-term solution and a long-term solution.
The short-term solution is necessary during our stalling phase. 
In the stalling phase we just want vcv
and we want indirect statement and indirect question to be functional in the stalling phase

This is what suggests itself to me:

short-term solution:
    - classify speak, say, know, and all mental verbs as intransitive for now
    - or: classify them as clause_transitive (or some similar term) and treat
            all clause_transitive verbs as intransitive

long-term solution:
    - see if any other kinds of verbs besides mental verbs need special treatment
    - (e.g. quod the fact that clause can be subject or object of any verb, not just mental)
    - come up with a classification term that encompasses mental verbs
        - e.g. clause_transitive, complementizer_transitive
    - when we make a template creator, clause_transitive verbs produce a clause_object
       or a clause_subject
   - and of course they don't make a regular noun_object if they make a clause_object
    - (in other words: we develop an information-rich template)
    - we might even call it a mental_clause_object
    
    
    
- with regard to the problem of speak:
    they spoke why he was killed
    they were poken why the mountain is pushed (would make sense as "told", though)
    
    - a quick and dirty option would be to limit dico to clause_transitive and can never be intransitive
    - but this isn't a realistic account of language
    
    - I guess to fully work up a sophisticated model we need to have multiple translations that are dependent on context
    - e.g. dico, dicere = speak, say
    - when intransitive it should be 'speak'
        they spoke
    - when transitive it could be either, but we could just pick one    
        they spoke words = they said words
    - when clause_transitive it should be 'say'
        they said why the mountain was pushed
    - when passive
        intransitive - no passive
        transitive - were spoken (special subjects only, see below)
        clause_transitive - were said
        
- one other point, I've added a category of mental_nouns
    - word, sentence, opinion, etc. are mental_nouns
    - they're not entire clauses of mental verbs
    - but they're the only sensible noun objects of mental verbs
    - *the cow was spoken is ungrammatical
    
END OF AKIVA'S RESPONSE
    
END OF MENTAL VERB DIGRESSION

TAXONOMY OF VERBS
    transitive (aka obligatory transitive) //fill
    intransitive (aka onligatory intransitive)   //sleep
    ditransitive //eat
    mental ditransitive //speak (when intransitive), say (when transitive)
    mental transitive //know
    mental intransitive //ruminate (identical to any intransitive)


Goal 2: get vcv mode to work, with workable nested drop down and incorporate into the game
- prereqs before release
    - making the noun switch functionality (seems to be done)
    - ambiguity 
        - convergent ambiguity (two different paths have same terminal string)
            - (-am = future || pres subj)
            - solution: check set of dropdown answers, if a duplicate exists, send an alert "the one you selected is a duplicate answer with x"
            - seems to be fixable with a language-independent solution
        - divergent ambiguity (one origin has two correct divergent paths with different terminal string)
            - ruit = what tense in english?
            - solution: have a catch statement (if two stems are identical in Latin && )
            - seems to be fixable only with a language-specific solution
    - drop downs have cosmetic issues
        - dropping up
        - drop down menus don't disappear when they've been opened
        - cramped
    - check lexicon and avoid transitive verbs that can't lack object
        - say? know? feel? mental verbs seem to either require an object or forbid it
    - dummy agreement markers 
        - solution: set subject gender as masculine upstream
- big bug: drop downs not giving full options, only the two verbs that are included
    - always only 2 choices for verb, 1 for conjunction
        - dropdowns should be giving as many extra items as are specified in the parameter latin_extra_levels
        - but somehow we're only getting the words that are used
        - e.g. if it's he attacks but they eat, we only get attack and eat as options
    - vocabulary cheat sheet is not functional in kck mode    



- bug: the one-option problem
    - when there's only one option, a nesting drop down level shouldn't be spawned, it should be skipped
    - e.g.:
    - sometimes the range of allowed options is low (i.e. only active not passive)
    - and if voice is part of the drop_down_path
    - we end up with a path like: command / love -> active -> 3s / 3p
    - we don't want the active drop down level to even start
  
- add to data: 2s, 3s, 3p etc. should have level specific terminology (you, he, they, etc. for more basic levels) 

- get a dashed version ready for release

- start dash removal
    - adapt the old library for dash removal
    - set the parameter for dashes in modules
    - after dash removal, test ambiguity control


- cosmetics: clarify for students the green and red path    
    - include the question along with the green and red answer
    - some sort of symbol for the drop downs
    - correct answer comes first and is big
    - path name comes second and is smaller
    - with some sort of symbol for path
    - such as: AMABANT love->prior->3p
    the green and red path should have some sort of symbole

Goal 3: taxonomy

Goal 4: to get nouns working
- information-rich templates
- choosing lexemes (I'm not sure what our level of progress on this is)
- making sure not to choose time for nouns (and other such category-mixing blunders)

- declining nouns (seem to work for declensions 1, 2, 3, need to be tied in)
- assembling components and giving them the proper order (SOV, SCRAMBLE, VERB FINAL)
  - avoiding scrambled infinitives
  - word order: upstream vs. language-by-language
        - option 1: forced to match word order of source language
        - option 2: look at module preferences and choose independently of source language
- we need a parameter for how often we expand to include personal agent/implement
- in general we want parameters for all expansions
    - adding genitives to nouns
    - adding datives to verbs that have optional datives


- ambiguity and nonsense avoidance

- in e.g. I speak, the I should be classed as animate so that verbs that can't have animate subjects don't produce forms with anything but 3rd person


- display issues (dash removal, upper case)

Goal 5: adjectives

Goal 6: other types of noun (ablative, genitive)



DOWN THE ROAD
- improve cheat sheet display (maybe make the text appear in the top of the box)




Agenda for saturday





- give verb information about subject gender and explicitness


PREP-CHORES
- add noun lexemes (AS - DONE)
- add noun drop downs to parameters in allowed (AS - MOSTLY DONE)
- add noun decliner (DS)
    - need to write a function
        - determine_case 
        - arguments: target language, conjunction/direction, role_name
        
KCK GENERATION WITH NOUNS
- produce templates with S V O
- pick lexemes
- lexeme choice of subject determines gender
- set gender of kernel based on noun picked
    - need function: set_gender_of_kernel
- if implicit, choose gender randomly from allowed


DROP DOWN
- add noun drop-down options implementation
  - adapt most of our verb machinery for nouns
  - create a separate drop_down_path for nouns parameter in kck_levels (AS - DONE)
  - noun drop downs probably not nested (though we should build in the possibility just to be consistent)
        - nested behavior probably not useful in english
            (we just want wolf / wolves / lion / lions)
        - but nested behavior could be useful in Latin
            - first level of drop:
                LUP
                URS
                CORV
                LEO/LEON
            - second level of drop
                singular
                plural
            - third level of drop
                LEO
                LEON-IS
                LEON-Ī
                LEON-EM
                LEON-E
            - or (right?)
                LEON-ĒS
                LEON-UM
                LEON-IBUS
                LEON-ĒS
                LEON-IBUS








ADD FUNCTIONALITY
- add subject pronouns in Latin


ONLY AN ISSUE IN IMPLICIT VERB
- parameter in kck_level to set for handling gender in translation
    - call it gender_preference
        'default_he'
        'random_gender'
        'he/she/it'
    - English: 
        he is default
        pick he || she || it 
        'he/she/it'
    - Latin: 
        - option a -us/a/um
        - pick -us || -a || -um
        - option b '-us' is the default or us/a/um
    - suppose the subject options are lupus and regina
        - then to avoid giving away information we need to have both -us and -a (in a periphrastic)
        - but we don't need to have -um (and we might not want to)




MOPPING UP CHORES
- rename drop_down_path to drop_down_path_verb







- it seems like a straightforward process

- one thing to be on the lookout for:
    - we need to choose verb first
    - and that will constrain our noun lexeme choice
    - e.g. certain nouns cannot combine with certain verbs 
        - abstractions can't be objects of certain verbs, etc.
    - we probably need to create some type of verb-noun implications
        - we might want to do something like this in verb lexemes:
            - subject_black_list:
            - object_black_list:
        - e.g.
            - 'throw': {
                object_black_list: [abstraction, location]
            }
        - option 2 would be:
            - create a larger category like physicality/concreteness
            - and this would always exclude abstraction and locatio 
        - e.g.
            - 'throw': {
                lexical properties: [physical]
            }
        - option 1 is more explicit and maybe less liable to lead to vagueness and user error
        - that seems to make sense so maybe we want to use option 1 even though option 2 might be less typing
            - since users can make mistakes and might want to have the information in one place

        - AS: I think in general the option 1 approach is better because we might have verbs
            that occupy gray areas, like rule works nicely with location but not abstraction
            
        - for me the big question that arises:
            - should we also make a white list?
            - like animate for the subject of mental verbs?
            - yes and inanimate for verbs like "lie"  - the rock lies next to the river
            - maybe we could just make it a list of constraints
            - like 'throw': {
                'object_constraints': ['not abstraction', 'not location']
            }
            - 'speak': {
                'subject_constraints': ['animate']
            }
            - 'lie': {
                'subject_constraints': ['not animate']
            }
            
            AS: well a person can lie next to a river (or another person, although we might want a grade-level restriction) ..  but that's just a detail
            yeah ha that's a good point we're gonna have to be careful with the young minds
            
            I don't know about that format. I kind of prefer the white and black list approach
            it seems a little easier to read (yes, it seems to make sense to have more type of data that each do one thing)
            AS: though of course there is the potential for collision
            DS: what type of collision?
            AS: just user error, like if someone was sloppy and put something on both lists
            but I think we can live with that
            we'll never eliminate user error
            DS: we seem to have a potential for this kind of error whatever we do
            AS: so I suggest we implement white and black lists for the following
                (although this is getting a little ahead of ourselves)
                subject
                object
                implement
                recipient
                
              (moving these to semantic notes)
                
            AS: so what else do we need to do before getting started? 
            what other design do we need to carefully deliberate?
            


- DS: fear clauses and mental verbs don't take a (direct) object
    as main verbs introducing is/fear, even though they're transitive
    - I feel pain
    - I fear the wolf
    - I feel that the bird eats the spider (grammatically coherent)
    - I fear that he will go to Rome
    - * I feel pain that the bird eats the spider (not grammatically coherent without apposition)
    - * I fear the wolf that he will go to Rome

- AS: above is a good point. I feel like it's useful for there to be a category called clause
    - so fear   
        object_white_list: [clause, noun]
    - think
        object_white_list: [clause]
        object_black_list: [noun]

- Yes, and a conjunction can force its subordinate clause to be the object of the verb's main clause
    - a rather unrelated issue is that if a verb is passive the subject and object reverse
        - so a sword can be thrown but not throw

    - yes let's talk about how voice plays a role in this
        - it seems like we need voice to be determined before we pick the noun lexeme (which we said we would do)
        - like if we have S V and we don't know the voice then we're in trouble
        - 
            - *the republic is thrown
            - *the sword is thought
            - stuff like that (those aren't very good examples but I can't think of others)
        - it seems to me like we need to use subject restrictions on the object and vice versa

- okay I added voice to the process above
    - we send template, voice boolean, transitivity boolean to lexeme picker
    
- is it worth not making them strictly booleans?
    - like having it be 'transitive' or 'intransitive'?
    - this might allow for more flexibility down the road like double transitive verbs
       - yes it seems to be worthwhile to not just use strict booleans
       - (by the way, I don't actually think double transitive verbs exist
           except insofar as they have an indirect object which has the meaning of a dative)
        - I might not be using the word right but I'm thinking of the double accusative
            - he teaches the children art (two accus objects in latin)
               - Can't we treat the first accusative like a type of dative which happens to be in the accusitive case for some verbs?
                   - because this just means he teaches art to the children
                       - although this does have the issue of not allowing for certain type of passive
                           - I told the king the story
                           - the story was told to the king by me
                           - the king was told the story by me (issue nai
                           vely)
                - yeah maybe that's a good solution
                - I don't know how many double accusatives there are in latin. I have a book at home we can look it up
                - yeah good point, theres some tricky behavior in the passive of double accusatives
                
                
- but let's stay on track. I'll migrate these to advanced semantics
- let's get something basic going
- it seems like subject and object white and black lists are a good started
- shall I start adding white and black lists and you make a template generator?

- yeah let's try to write white/black lists and implement everything until line 31.
   - should we include clauses as objects?
        - yes definitely, there are quite a few cases in latin at least where clauses are objects
    - so do we have to denote this in the conjunction object?
        - i.e., a fear conjunction has some type of difference from 
        - I'm not sure - the conjunction library itself might be powerful enough to handle this
            - it does seem like the conjunction library should handle this or the verb should 
                - it just seems to me like the conjunction should say "I need to be considered the object of my verb"
                    - and in addition have any restriction it might need
                - yeah that seems a good idea
                    - the conjunction could have a property
                        - clause_acts_as_noun
                            (and thus can be subject or object)
                            (and thus no other object possible)
                            (i.e. *he fears the wolf that he will attack)
                        - clause_acts_as_adverb
                            (and thus can't be subject or object)
                            (and thus objects are allowed)
                        - clasue_acts_as_adjective
                            (to be implemented for relative clauses)
                        - I think a clause_acts_as property seems wise.
                            - for all our current conjunctions it would be object or adverb
                            - I don't think it should be noun since that's really more like what happens with a the fact that clause
                        - can act as a noun in the sense that it can be the subject of a passive verb
                            - It just seems like we have to distinguish this from a the fact that clause which can crop up anywhere
                            - by means of the fact that I was prepared, I was able to attack the country
                                - but the fact that is weird and I really don't care whether we call this noun or object
                            - it's a little advanced but:
                                - that he will attack was feared
                                - yes it is the subject there but this only happens with passive verbs
                                - right so it's inaccurate to call it clause acts as object 
                                    (in a sense - it's a small inaccuracy maybe)
                            - so do you have any opinion about "the fact that" or do you want to ignore it for now (which make sense)
                            - I think we should leave it for now. 
                            I want to think about it longer and look up some examples beforehand
                            - seems reasonable
                        - so should it look like this?
                            clause_acts_as: 'noun'   //choices: noun, adverb, adjective (yes that seems fine)
                            let's do that and I'll take account of that in my code (not "adjective" though)
        - the white list in the verb might be redundant
        - the only advantage would be that for certain verbs (like fear)
            - we want to be able to use fear even when we don't have a clause, like he fears the wolf
            - as well as when it gets triggered by the conjunction library (he fears that)
        - maybe it's just the case that we can leave all clause stuff to the conjunction library
        - and fear will get picked

- so how do you want to proceed? here are some agenda items:
    - (yes this seems reasonable)
    - does this seem like a good division of labor?
    - (yes. It seems like the template implications should be part of the template generator, though;
        there aren't that many and it doesn't seem worthwhile to store them as data)
        (okay sounds good. I'll get cracking on my items, sound good?
        (all kck verbs are currently stored in testing kernel library right?)
        (yes that's where the lexicon is stored)
        (okay ill get started)
        are you gonna make template generator in the kck folder? that seems like the place to do it
        yeah if you look you'll see that file
    - add clause_acts_as to conjunctions (AS)
    - add black and white lists to verb lexicon (AS)
    - make set of template implications (DS) (not needed)
        - e.g. transitive implies object
    - make a template generator (DS) (done)
    - make a lexeme picker

- current state
    - everything seems to be going well
    - but we eventually get a mysterious error about mood.
    - which is surprisingly far downstream!

-  seems like much of this should be migrated
    
- down the road
    - design taxonomical object for drop down
    - load taxonomical data
    - morphological path
    - green/red for input mode
  
  
- design filters for ablative and dative semantics with verb    
    - discussion
          but those last two categories are obviously down the road issues
                
                i.e. you can attack with a spear
                so attack has implement with the normal category of implements
                but you can rule with kindness (is this even really implement? are you ruling by means of kindness?)
                    AS: we might want to develop another kind of role that captures this other meaning of with
                    we could call it manner
                    when you conquer someone by means of tears it's an implement
                    so you might be able to conquer someone with pity
                    
                    
                    DS: Yeah that seems like what it is.
                anyway this is getting complicated, we shouldn't worry about it now
                just wanted to bring it up so we're thinking of it
                
                let's not get too lost in the weeds, glad we're thinking about this ahead of time though
                


- profound things that can be delayed without disaster
    - ambiguity resolution and avoidance
    
- cosmetic user experience things
    - drops go up instead of down
    - green/red feebdack should probably go in a different spot
    - better give away answers

- the dropping up instead of down issue
    - possible solution here: 
        - https://www.onedesigns.com/support/topic/how-to-get-the-sub-categories-menu-to-drop-down-instead-of-up


use this for issues

SHORT TERM

- allowed is not controlling drop down parameters
    - drop/non-drop (dan: done)
    - number of dummy options (dan: done)

- finish writing a terminology display dictionary for all languages (excluding relative stuff) (Akiva will do)
  
INTEGRATION
- integrate into quiz and profile

- rename to kck_sentence


- functions that need to be made in KCKMode
    - generate_sentence() 
    - get_text_in_source_language()
    - get_drops_and_non_drops_in_target_language()
    - get_correct_answer_string()
    - check_drop_down_correctness()
    - get_correct_answer_paths()
    
- questions to resolve
    - new name for kck_sentence?

- progress: we're currently getting a display, but it doesn't yet work

  
  
TAXONOMY
- write a taxonomy_level_dictionary

- write a taxonomy JSON object that is testable

- look over taxonomy_level_dictionary for coherence


- send zoological (taxonomy) data to drop downs




LOOSE ENDS
- add relative and absolute time to terminology_display_dictionary (Akiva will do)
- make sure relative and absolute time properly distinguished backstage (Dan should do)





TESTING
- run a bunch of tests, looking for semantic nonsense just in verbs
    - of the sort: "he will be feared that he will attack"


ADD LEXEMES
- add a bunch of verb lexemes
- add more conjunctions to conjunction library
- build in defensiveness, if not enough lexemes exist, then just skip those without crashing


VOCABULARY CHEAT SHEETS
- make vocabulary cheat sheets
- add number of dummy lexemes (by part of speech) to the allowed dictionary


RANGE CAPACITY
- make parameters able to be set as ranges, not just booleans
- import and adapt range-reading functions from previous incarnation


COSMETICS AND CLEAN UP
- investigate lingering drop down bugs
    - maybe use a mouse-over functionality


TESTING
- make many levels (Akiva will do)
- make a button/drop-down/slider to set level - for testing (Dan will do)
- test and catalog nonsense/ambiguity



END OF MVP STAGE FOR LATE SUMMER
////////////////////





MAKE A LIST OF ALL SITUATIONS WHERE AMBIGUITIES ARE RESOLVED BY CONTEXT


AMBIGUITY
- ambiguity resolution
 - two distinct answers with same text
        - ruit (perfect) = ruit (present)
        - leones (nom) = leones (acc)
        - he verbs = more than one path in english
        - lexeme-level phenomenon
        - ideal solution:
            2 kinds of sitation
            - truly ambiguous
                - "correct. It could also be ___other-option-here__"
            - not ambiguous
                - "well... it could be in isolation, but look at the context and fix"
        - stopgap solution:
            - skip fut.1st.sg and pres.subj.1st.sg. in 3rd conj.
 - impossible to determine correct answer with information given (down the road)
        - leones amant duces
            - solution: don't produce the sentence
        - sentence-level phenominon


MORPHOLOGY


- write a dash-removal function
    - adapt from previous incarnation






LONGER TERM

- lexeme is always in english in the drop downs, should also be available in latin


- somehow add morphological data to drop downs 
    - lexeme, principal part, infix, ending
    - attack, oppugnav, era, s -> oppugnav-era-s
    - goal: nested drop down can be used as a latin morphology trainer


////////




randomly generate maximal templates
    aS S gen-S a-gen-S V a-O O with-abl adj-with-abl prep-phrase

randomly fill whole template

remove certain parts of template (replace with none)

add nouns

add swap

add none display

add adjectives







/////////////////


DONE AND OLDER STUFF BELOW



- fix the independent subjunctive bugs (done)

- switch past present future to prior, simultaneous, subsequent in conjunction library (done)

- include conditional type as a clause type (pres ctf, etc.) (done, but was it done in a good way?)

- include independent subjunctive type as a clause type (present deliberative etc.)
(done. but there's one clause type for all independent subjunctives)

- make a conjunction object (seems to be done)

-????: use our dummy lexicon to produce a display
    - dummy lexicon is var testing_kernels in testing_kernel_library

- rebuild lexicon

- plug in our lexicon to the stream

- decide if we want to add sequence property to conditionals
(only an issue to distinguish between flv and pres ctf and e.g. to tell whether we want pluperf subj or perf subj)



What has happened and our plans:




PART 1

STAGE -1
- 1: decide on design rules
- 2: decide on object types

STAGE 0:
- 1: produce blank kernels
- 2: add determistic properties

STAGE 1
- 1: add random properties
- 2: add sequence
- 3: add person and number

(we are here)

STAGE 1.5
- 1: display
- 2: check to make sure we have enough information to make a quiz from this
explanation from Akiva:
i.e. we want to ask about all properties and we want to ask about part of speech
so we just want to make sure that we have all that information and it's easy to access
(we don't need to make the quiz obviously)
What part of speech is the highlighted word?
Is the highlighted word transitive or intransitive?
Is the highlighted word active or passive?


STAGE 2
general note: don't add nouns yet!!!
- 1: instead, feed K C K into our pipeline
question from Dan to Akiva: are we doing this?
- 2: and plug the end result V(with properties) C(with properties) V(with properties)
into a function that inflects English, Latin and SSSLatin
- 3: we already have such functions, we should pull them out into their own files
(inflect_verb.js or something similar) and adapt them as necessary


STAGE 3
- 1: reflect on the process so far
- 2: make any redesign decisions

End of PART 1

PART 2

STAGE 4
- 1: add lexeme choice
- 2: rebuild our verb lexicon

STAGE 5
note: in this stage we have a new MVP
question from Dan: Wasn't stage 4 intended for the same MVP?
- 1: produce sentences of the form:
"you love because we shout"
"he will attack if they shout"
"if they shout, he will attack"
with enough information to make a quiz on all properties, including clause type

End of PART 2



MAKE DROP DOWN FUNCTIONALITY IN BOTH DIRECTIONS






PART 3

STAGE 6 (and maybe more)
- add nouns

...

End of PART 3

(the unknown beyond)

END

Notes:
Why do so much with verbs before adding nouns?
Isn't it descending into the messy reality prematurely?
Shouldn't we just generate purely abstract kernels
with S and O and adjectives first?

Well, maybe. But we have the inflect verb functions pretty well developed
already and it won't take long to chain them up into the pipeline.
The advantage of doing this now is that we will see all the strange things
and weird linguistic realities and bugs and design issues and pain points.
We might learn a great deal and it won't take too long.