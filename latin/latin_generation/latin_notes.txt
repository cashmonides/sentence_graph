TODO MINIMUM VIABLE PRODUCT
- no 3rd decl plurals
- no intransitive passive
- level needs to be linked to score
- parameters for score need to be finalized
- level to allowed needs to be relatively thorough
- lexicon needs expansion


TODO TESTING OF MINIMUM


TODO MEDIUM VIABLE PRODUCT
- expand mental verb lexicon

TODO ELEGANCE
quiz data object
clean up and comment mental wrap
make homogeneity elegant

TODO THINK ABOUT
what are optimal parameters for:
    - correct reward
    - incorrect penalty
    - max incorrect streak
    - switch count (how many questions in mode x before switching to new mode)


TODO LOGGING
remove debugs
judicously insert true LOG statements (of the form //~`console.log("LOG.function_name output = ", output))
//~`console.log("LOG.function_name output = ", output)
    OR
//~`console.log("LOG.function_name output.stringified = ", JSON.stringify(output))

TODO LEXICON STUFF
identify some verbs that can be either transitive or intransitive
create mental verbs
create subordinating conjunctions

TODO little things
- double third declension
- no scramble in is
- scramble should be a parameter in level_to_allowed
- can't have pure intransitives be able to be passive

TODO homogoneity issue
homogeneity of cartesian should be a controllable parameter in level

TODO big picture
- should we make QUIZ DATA (choices, answer, drop downs) into an object

TODO add indirect statement/question
- kernel seems roughly functional
    except: we need to add subject accusative
        - make sure english subject shows up in subject drop down not in verb drop down
- we need to wrap kernel in a mental verb
    - a function
        signature:
            input: kernel (of clause type iq or is)
            output: QuizDataObject

    - try to eloquently create main mental verbs
    - a lexicon of mental verbs
    - a lexicon of subordinating conjunctions (cur, quando, utrum)
    - we need to deal with the "that" situation
    -
- mixing text and drop down
    step 1
    text text text text text text X text text Y
    DROP-x DROP-y

    step 2
    text text text text text text DROP text text DROP





GOAL
drop downs can be displayed as:
text text text text text text DROP text text DROP
OR
DROP DROP DROP



OPTION #1 (maximal) (inhomogenous states)
LEONES AMANTUR    ||       LEONES AMANT MUREM

SUBJ VERB OBJECT
lion love  none



OPTION #2 (minimal) (homogenous states)
LEONES AMANTUR

SUBJ VERB
lion love





states[0]





CONVERTING DEBUGGING TO LOG
make_output done
state_to_lexeme contains no LOGs
pick_lexeme done



BUGS
- no english pronoun is being produced because there's no subject in the template
    - VERB
- intransitive verbs are produced in the passive ambulatur
- no cartesian choices in drop down anymore (LEO CADIT -> choices are lion, lions || we want lion, lions, bear, bears)
- VIR-I URS-OS AM-A-NT -> only subject in drop down
    - message: Cannot read property 'replace' of undefined

FUNCTIONALITY
- we want larger vocabulary to be cartesian
    - (LEO CADIT -> choices are lion, lions || we want lion, lions, bear, bears)





BEFORE GIO
- enter a few sentences
- come up with some multi-step tagging for the sake of example
- try to integrate mcmode2 into the online version
- a precise and encapsulated version of the "insert x into dictionary string"


FOR GIO
- rows of drop downs
- correct after give away can't give points
- how do we check on the data to see if it's ok
-


DO ON LATIN
- add pronoun to english
- enter more verbs and nouns
- add more lexemes
- flesh out level to allowed map
- clean up //~`console.log
	- remove debugging
	- add control flow logs






NEW MODE:
Translate the following:
URSUS SCIT CUR AVIS REGAT

The bear knows _____ the bird ______

give away phrase: "the correct answer is"

feedback box: the correct answer is why rules



TODO
sequence needs to be moved to level_to_allowed
word_setting_generator is currently probably obsolete and should be incorporated within another file
replace random choice with actual functions
start in sentence_tree_generator has to be replaced

//todo language_enum is not implemented well - both inflect english and inflect latin are hard-coded whereas they should be dependent on language_enum
//todo make_kernel and make_kernel_new should be unified (make_kernel used for random)




Translate the following:
URSUS SCIT CUR AVIS REGAT

The bear knows _____ the bird ______

give away phrase: "the correct answer is"

feedback box: the correct answer is why rules


SENTENCE

QUESTION DISPLAY BOX

FEEDBACK DISPLAY BOX

TEXT DISPLAY BOX
string
index for a highlighted word (if necessary)

DROP DOWNS
# of drop downs
content of each drop down
heading
correct answer choice
order of answers




type #1
translate URSUS VIRUM AMAT
- produced by latin_generator



type #2
what part of the speech is the highlighted word?
URSUS virum amat
- produced by our tagger
-


BIGGEST BUG
we need all possibilities, not just SVO
    - template gives us the appropriate information (SVO vs OV or V)
        - store the template as e.g. a property of the kernel (kernel.template)
    - iterate over template
        - create drop downs for each item in template



???BUG
sentence_tree_generator needs to live inside of the directory quiz


ADD
give away ending phrase add to other modes
score shouldn't increase after give away answer
a vs. the should be a parameter in level to allowed (we need to make sure that our cartesian operations are not pulling both a and the)
hover needs to be strictly tied to clickable
SUBJECT OBJECT VERB shouldn't be submittable (i.e. submit button should be non-clickable until all drop downs are selected




outside knowledge
BUG: latin words can be clicked on and become red
BUG: bad formatting (drop downs should be in a row below sentence)




PROXIMATE TO DO
- get English to produce subject pronouns for implicit sentences


DISTAL TO DO
- multiple clauses
	- start with coordinatng conjunctions
	- advance to indirect questions






CHANGE LOG 10-15
new variable x.transitivity (fixed in make output)








ORDER OF PARAMETERS
clause_type
transitivity
(pick lexemes)
sequence
tense
implicitness
person
voice
number_of_other_nouns
s_o_swap



QUESTIONS ABOUT ORDER
should s_o_swap be moved upstream before pick lexemes? (since if we don't swap it changes what kind of lexemes we choose)




we need to fix transitivity
- that will determine elements
- and lexeme list








assuming states are homogenous



state.template




template needs only level
	- thus it consults level to determine transitivity


set TRANSITIVITY


set CARTESIAN parameters
	['clause_type', 'sequence', 'tense', 'implicitness', 'person',
    'voice', 'number_of_other_nouns', 's_o_swap'];


make KERNEL




BIGGER QUESTIONS
- how useful are the enumerations Element.subject etc.?




OVERALL CLEAN UP OF CODE
- generalize and abstract the fixing of parameters
	- e.g. order of parameters
- modularize selection of lexemes and move it way upstream
- make a utility function that processes the setting of parameter
	- arguments: parameter, level, language_enum
	- output:




CHOOSING LEXEMES
- cartesian parameters should tell us how many choices we have
- things like transitivity and level tell us what to pick
- the output is a set of lexemes that have
- consolidate a single state-like object that contains the appropriate information about e.g. transitivity



CHORES
- add more lexemes
- flesh out level to allowed map
- clean up //~`console.log
	- remove debugging
	- add control flow logs
