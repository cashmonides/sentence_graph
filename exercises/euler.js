/*
Problem 1
If we list all the natural numbers below 10 that are multiples of 3 or 5, 
we get 3, 5, 6 and 9. 
The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.
*/
var lower_limit = 1;
var upper_limit = 1000;
var divisor_list = [3, 5];

function sum (a, b) {
    return a + b;
};

function divisible_by (a, b) {
    return a % b === 0;
};

function check_for_divisibility (a, divisor_list) {
    for (var i = 0; i < divisor_list.length; i++) {
        if (divisible_by (a, divisor_list[i])) {
            return true;
        }
    }
}


function iterate_divisibility_check (lower_limit, upper_limit, divisor_list) {
    var output_list = [];
    for (var i = lower_limit; i < upper_limit; i++) {
        if (check_for_divisibility(i, divisor_list)) {
            output_list.push(i);
        }
    };
    return output_list;
}

function sum_list (list) {
    var sum = 0;
    for (var i = 0; i < list.length; i++) {
        sum = sum + list[i];
    };
    return sum;
}

function euler_1_master (lower_limit, upper_limit, divisor_list) {
    var list = iterate_divisibility_check(lower_limit, upper_limit, divisor_list);
    var sum = sum_list(list);
    console.log("EULER 1 solution = ", sum);
    return sum;
}

///FUCNTIONAL VERSION BELOW
function is_divisible_by_3_or_5 (integer) {
    return (integer % 3 == 0 || integer % 5 == 0);
}


// below isn't very functional
// is there some functional way to produce an array from 1 to 1000?


function euler_1_master_2 () {
    var array = make_array (1, 1000);
    var new_array = array.filter(is_divisible_by_3_or_5);
    console.log("EULER 1 new array = ", new_array);
    var sum = new_array.reduce(function (a, b) {return a + b});
    console.log("EULER 1 solution 2 = ", sum);
    return sum;
}


// below is an attempt to abstract away the hard-coded function above
// namely turn 3 and 5 into parameters that can be fed into our function
// this is better but it still has a for loop
function make_array (range) {
    var array = [];
    for (var i = range[0]; i < range[1]; i++) {
        array.push(i);
    };
    return array;
};

function euler_1_master_3 (divisor_list, range) {
    var array = make_array (range);
    console.log("EULER array = ", array);
    console.log("EULER divisor_list = ", divisor_list);
    
    
    var new_array = array.filter(function (item) {
        for (var i = 0; i < divisor_list.length; i++) {
            if (item % divisor_list[i] == 0) {
                return true;
            } else {
                continue;
            }
        }
    });
    
    console.log("EULER 1 new array = ", new_array);
    var sum = new_array.reduce(function (a, b) {return a + b});
    console.log("EULER 1 solution 2 = ", sum);
    return sum;
}

// purely additive, not subtractive
function euler_1_master_4 (divisor_list, range) {
    var sum = 0;
    var array = [];
    for (var i = range[0]; i < range[1]; i++) {
        for (var j = 0; j < divisor_list.length; j++) {
            if (i % divisor_list[j] == 0) {
               sum = sum + i;
               array.push(i);
            } else {
                continue;
            }
        }
    }
    var sum_of_list = sum_list(array);
    console.log("EULER 1 sum of list = ", sum_of_list);
    console.log("EULER 1 version 4 sum = ", sum);
    return sum;
}

// EULER problem 2
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
// By starting with 1 and 2, the first 10 terms will be:

// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

// By considering the terms in the Fibonacci sequence whose values do not exceed four million,
// find the sum of the even-valued terms.

// psuedocode
// generate the sequence
    // iterate over 4 million
    // set current = 1
    // set next = 2
    // sum
    // reset current to next
    // reset next to sum
// check if new term is even
// if so, add it to master_sum
function is_even(a) {
    return a % 2 == 0;
}

function euler_2_master (upper_limit) {
    var last = 1;
    var current = 2;
    var sum = 0;
    var final_sum = 0;
    var array = [];
    array.push(last);
    // for (var i = 0; i < upper_limit; i++)
    while (sum < upper_limit) {
        if (current % 2 == 0) {
            final_sum = final_sum + current;
        }
        array.push(current);
        // sum = 0 + 1 + 2 = 3
        // sum = sum + last + current;
        sum = last + current;
        // reset 1 as 2
        last = current;
        // reset 2 as 3
        current = sum;
    }
    var filtered_array = array.filter(function (elem) {
        return elem % 2 === 0;
    });
    var added_array = filtered_array.reduce(function (a, b) {
        return a + b;
    });
    
    console.log("EULER 2 original_array = ", array);
    console.log("EULER 2 filtered_array = ", filtered_array);
    console.log("EULER 2 added_array = ", added_array);
    console.log("EULER 2 final_sum = ", final_sum);
    
    return sum;
}


// Euler problem 3
// The prime factors of 13195 are 5, 7, 13 and 29.
// What is the largest prime factor of the number 600851475143 ?

//pseudocode
// a, b, c, d, e, f, g... are prime factors of x when
// a...n are all prime
// product of a...n = z
// we can iterate through all prime numbers and try every combo

function produce_array_of_primes (upper_limit) {
    var array = [];
    //we iterate through the integers
    for (var i = 1; i < upper_limit; i++) {
        // we push the item to the array
        array.push(i);
        // if any integer from 1 to i/2 divides i
        // then we kick it out of the list
        for (var j = 2; j < i/2; j++) {
            if (i % j == 0) {
                array.pop();
                break;
            } 
        }
    }
    // console.log("EULER 3 array of primes = ", array);
    return array;
}

function produce_array_of_primes2 (upper_limit, number) {
    var array = [];
    //we iterate through the integers
    for (var i = 1; i < upper_limit; i++) {
        // we push the item to the array
        if (number % i == 0) {
           array.push(i);
            // if any integer from 1 to i/2 divides i
            // then we kick it out of the list
            for (var j = 2; j < i/2; j++) {
                if (i % j == 0) {
                    array.pop();
                    break;
                } 
            } 
        }
    }
    console.log("EULER 3 array of divisor primes = ", array);
    return array;
}


function is_x_prime (x) {
    if (x % 2 == 0) {
        return false;
    }
    
    var midpoint = Math.floor(x/2);
    
    
    for (var i = 2; i < midpoint; i++) {
        if (x % i == 0) {
            return false;
        } else {
            continue;
        }
    }
    
    return true;
}

function is_x_prime_lean (x) {
    if (x % 2 == 0) {
        return false;
    }
    
    // var midpoint = Math.floor(x/2);
    var midpoint = 10;
    
    
    for (var i = 2; i < midpoint; i++) {
        if (x % i == 0) {
            return false;
        } else {
            continue;
        }
    }
    
    return true;
}

//range must be [int, int]
function is_x_prime_stepwise (x, range) {
    if (x % 2 == 0) {
        return false;
    }
    
    for (var i = range[0]; i < range[1]; i++) {
        if (x % i == 0) {
            return false;
        } else {
            continue;
        }
    }
    
    return true;
}

// maybe walk backwards from midpoint (number/2)
// check if i divisible by 2, if so skip
// check if number divisible by i, if not skip
// if so, check if prime
// function euler_3_master_2 (number) {
//     // set a midpoint (nothing above the midpoint of x can be a factor of x)
//     var midpoint = Math.floor(number/2);
//     console.log("EULER 3 midpoint = ", midpoint);
    
//     // iterate backwards from midpoint
//     // catching something that is both a factor of x and a prime
//     for (var i = midpoint; i > 0; --i) {
//         if (i % 2 == 0) {
//             // not prime
//             continue;
//         } else if (number % i != 0) {
//             // not a factor
//             continue;
//         } else if (number % i == 0) {
//             // console.log("EULER 3 highest divisor = ", i);
//             // if (is_x_prime(i)) {
//             if (is_x_prime_lean(i)) {
//                 console.log("EULER 3 highest prime = ", i);
//                 return i;
//             } else {
//                 continue;
//             }
//         }
//     }
//     console.log("EULER 3 no highest prime found");
//     return false;
// }

function euler_3_master_3 (number) {
    // set a midpoint (nothing above the midpoint of x can be a factor of x)
    var midpoint = Math.floor(number/2);
    console.log("EULER 3 midpoint = ", midpoint);
    
    // iterate backwards from midpoint
    // catching something that is both a factor of x and a prime
    for (var i = midpoint; i > 0; --i) {
        if (i % 2 == 0) {
            // not prime
            continue;
        } else if (number % i != 0) {
            // not a factor
            continue;
        } else if (number % i == 0) {
            // console.log("EULER 3 highest divisor = ", i);
            // if (is_x_prime(i)) {
            // if (is_x_prime_lean(i)) {
            if (is_x_prime_stepwise(i, [3, 10])) {
                console.log("EULER 3 highest prime = ", i);
                return i;
            } else {
                if (is_x_prime_stepwise(i, [11, 30])) {
                    console.log("EULER 3 highest prime = ", i);
                    return i;
                }
                continue;
            }
        }
    }
    console.log("EULER 3 no highest prime found");
    return false;
}

function euler_3_master (number) {
    var upper_limit = number/2;
    var primes = produce_array_of_primes2(upper_limit, number);
    console.log("EULER 3 divisible primes = ", primes);
    return;
    /*
    // maybe we should walk backwards 
    primes = primes.reverse();
    for (var i = 0; i < primes.length; i++) {
        if (number % primes[i] == 0) {
            console.log("EULER 3 largest prime = ", primes[i])
            return primes[i];
        }
    }
    
    
    
    // below walks through them in normal order and seems to crash the computer
    // var array = [];
    // for (var i = 0; i < primes.length; i++) {
    //     if (number % primes[i] == 0) {
    //         array.push(primes[i]);
    //     }
    // }
    // console.log("EULER 3 array of dividing primes = ", array);
    // var final_item_in_array = array[array.length-1];
    // console.log("EULER 3 final item in array of dividing primes = ", final_item_in_array);
    // return array;
    */
}